//4 Bit Binary Calculator //


module Add_half(input a,b,output c_out,sum);
 xor G1(sum,a,b);
 and G2(c_out,a,b);
endmodule

module Add_full(input a,b,c_in,output c_out,sum);
  wire w1,w2,w3;
  Add_half M1(a,b,w1,w2);
  Add_half M2(w2,c_in,w3,sum);
  or(c_out,w1,w3);
endmodule

module 3mul(input [2:0]a,input [2:0]b,input select,output [2:0]c);
   if (!select)
      c=a;
   else
      c=b;
   end 
endmodule

module 4mul(input [3:0]a,input [3:0]b,input select,output [3:0]c);
   if (!select)
      c=a;
   else
      c=b;
   end 
endmodule

module Add_sub_rca_4(input[3:0]a,b,input c_in,M,output c_out,V,output [3:0]sum);
  wire c_in1,c_in2,c_in3;
  wire [3:0]X;//create [3:0]X
  xor 
     G0(X[0],M,b[0]);
     G1(X[1],M,b[1]);
     G2(X[2],M,b[2]);
     G3(X[3],M,b[3]);
  Add_full 
          M0(a[0],X[0],c_in,c_in1,sum[0]);
          M1(a[1],X[1],c_in1,c_in2,sum[1]);
          M2(a[2],X[2],c_in2,c_in3,sum[2]);
          M3(a[3],X[3],c_in3,c_out,sum[3]);
  xor G4(V,c_in3,c_out);
endmodule 

module 4bitmultiplier(
 output[7:0]P,
 input[3:0]A,B,
);
 wire [3:0]X;
 wire [3:0]Y;
 wire [3:0]S;
 wire [3:0]Q;
 wire [3:0]R;
 wire [3:0]S1;
 wire [3:0]S2;
 wire V1,V2,V3;
 wire Z;
 assign Z=0;
 
 
 and 
    G0(P[0],A[0],B[0]); 
    G1(X[0],A[0],B[1]);
    G2(X[1],A[0],B[2]);
    G3(X[2],A[0],B[3]);
    G4(Y[0],A[1],B[0]);
    G5(Y[1],A[1],B[1]);
    G6(Y[2],A[1],B[2]);
    G7(Y[3],A[1],B[3]);

 Add_sub_rca_4 M1(X,Y,Z,Z,P[1],V1,S);

 and 
    G8(Q[0],A[2],B[0]);
    G9(Q[1],A[2],B[1]);
    G10(Q[2],A[2],B[2]);
    G11(Q[3],A[2],B[3]);

 Add_sub_rca_4 M2(Q,S,Z,Z,P[2],V2,S1);

 and 
    G12(R[0],A[3],B[0]);
    G13(R[1],A[3],B[1]);
    G14(R[2],A[3],B[2]);
    G15(R[3],A[3],B[3]);

 Add_sub_rca_4 M3(S1,R,Z,Z,P[3],V3,P[4:7]);

endmodule

module division(input [3:0]divis, input [3:0]divid, output [3:0]Q,output [3:0]R);
   wire Z,;
   assign Z=0;
   assign 0=1;
   wire [3:0]X1,X2,X3,X4,P1,P2,P3;
   wire B1,B2,B3,B4;
   wire V1,V2,V3,V4;
   Add_sub_rca_4 S1(A[3],B,Z,O,B1,V1,X1);
   3mul M1(X1[2:0],A[3],B1,P1[3:1]);
                                                   
   P1[0]=A[2];
   not N1(Q[3],B1);
   Add_sub_rca_4 S2(P1,B,Z,O,B2,V2,X2);
   not N2(Q[2],B2);
   3mul M2(X2[2:0],P1[2:0],B2,P2[3:1]);
                                                       
   P2[0]=A[1];
   Add_sub_rca_4 S3(P2,B,Z,O,B,V3,X3);
   not N3(Q[1],B3);
   3mul M3(X3[2:0],P2[2:0],B3,P3[3:1]);                                                        
                                                    
   P3[0]=A[0];
   Add_sub_rca_4 S4(P3,B,Z,0,B4,V4,X4);
   not N4(Q[0],B4);
   4mul M4(X4,P3,B4,R);
                                                       
endmodule

module calcu(input [3:0]A,B,input [1:0]S,output [3:0]Result,output [3:0]Remainder);

 wire Z,O,V;
 assign Z=0;
 assign O=1

 if S==00 //Addition
  Add_sub_rca_4 M1(A,B,Z,Z,Remainder,V,Result);
 else if S==01 //Subtraction
  Add_sub_rca_4 M2(A,B,Z,O,Remainder,V,Result);
 else if S==10 //Multiplication
  begin
   4bitmultiplier M3(Result,A,B);
   assign Remainder=0;
  end
 else if S==11 //Division 
  division M4(A,B,Result,Remainder);
 end

endmodule
